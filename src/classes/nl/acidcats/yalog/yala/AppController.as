/*Copyright 2009 Stephan Bezoen, http://stephan.acidcats.nlLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at   	http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/package nl.acidcats.yalog.yala {	import fl.controls.CheckBox;	import fl.controls.UIScrollBar;		import nl.acidcats.yalog.yala.datafilter.DebugMessageFilter;	import nl.acidcats.yalog.yala.datafilter.IDataFilter;	import nl.acidcats.yalog.yala.datafilter.InfoMessageFilter;	import nl.acidcats.yalog.yala.datafilter.WarnMessageFilter;	import nl.acidcats.yalog.yala.ui.YalogViewer;	import nl.acidcats.yalog.yala.ui.YalogViewerStatusEvent;	import nl.acidcats.yalog.yala.ui.table.RowRenderer;		import org.asaplibrary.ui.buttons.BaseButton;	import org.asaplibrary.ui.buttons.HilightButton;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.utils.getQualifiedClassName;	
	public class AppController extends MovieClip {		private static const BUTTONBAR_HEIGHT : Number = 30;				// stuff on the timeline		public var tBar : MovieClip;		public var tLed : MovieClip;		public var tPauseButton : BaseButton;		public var tClearButton : HilightButton;		public var tCopyButton : HilightButton;		public var tScrollBar : UIScrollBar;
		public var tDebugCB : CheckBox;		public var tInfoCB : CheckBox;		public var tWarnCB : CheckBox;				private var mDebugMessageFilter : IDataFilter = new DebugMessageFilter();		private var mInfoMessageFilter : IDataFilter = new InfoMessageFilter();		private var mWarnMessageFilter : IDataFilter = new WarnMessageFilter();				private var mYalogViewer : YalogViewer;				/**		 * Constructor		 */		public function AppController () {			initUI();		}
		/**		 * Initialize user interface elements		 */		private function initUI () : void {			// no scaling			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						// listen to resizing events			stage.addEventListener(Event.RESIZE, handleStageResize);						// create container for Yalog viewer			var s : Sprite = addChildAt(new Sprite(), getChildIndex(tScrollBar) - 1) as Sprite;						// create Yalog viewer			mYalogViewer = new YalogViewer(s, stage.stageWidth, tBar.y);			mYalogViewer.addEventListener(YalogViewerStatusEvent._EVENT, handleViewerStatusEvent);			mYalogViewer.setScrollBar(tScrollBar);						// initialize positioning			handleStageResize();						// listen to clicks			addEventListener(MouseEvent.CLICK, handleClick);			// style checkboxes			styleCheckbox(tDebugCB, RowRenderer.COLORS[0], "Debug");
			styleCheckbox(tInfoCB, RowRenderer.COLORS[1], "Info");
			styleCheckbox(tWarnCB, RowRenderer.COLORS[3], "Warn");		}				private function styleCheckbox (inCheckbox : CheckBox, inColor : uint, inText : String) : void {			var tf:TextFormat = new TextFormat();			tf.font = "Arial";			tf.size = 12;			tf.bold = true;			tf.color = inColor;						inCheckbox.textField.autoSize = TextFieldAutoSize.LEFT;			inCheckbox.setStyle("textFormat", tf);						inCheckbox.label = inText;		}		/**		 * Handle status events from YalogViewer		 */				private function handleViewerStatusEvent (e : YalogViewerStatusEvent) : void {			switch (e.subtype) {				case YalogViewerStatusEvent.ACTIVE: tLed.gotoAndStop("activity"); break;				case YalogViewerStatusEvent.INACTIVE: tLed.gotoAndStop("connected"); break;				case YalogViewerStatusEvent.ERROR: tLed.gotoAndStop("error"); break;				case YalogViewerStatusEvent.PAUSED: tLed.gotoAndStop("pause"); break;			}		}		/**		 *	Handle event from stage that it has been resized		 */		private function handleStageResize (e : Event = null) : void {			if (stage.stageHeight == 0) return;						mYalogViewer.setSize(stage.stageWidth, stage.stageHeight - BUTTONBAR_HEIGHT);						// reposition and resize some other interface elements			tBar.width = stage.stageWidth;			tBar.y = stage.stageHeight - BUTTONBAR_HEIGHT;						tClearButton.y = stage.stageHeight - tClearButton.height + 2;			tCopyButton.y = stage.stageHeight - tCopyButton.height - 2;			tPauseButton.y = stage.stageHeight - tPauseButton.height + 4;			tLed.y = stage.stageHeight - tLed.height + 2;
			tDebugCB.y = stage.stageHeight - (tDebugCB.height + 2);			tInfoCB.y = stage.stageHeight - (tDebugCB.height + 2);			tWarnCB.y = stage.stageHeight - (tDebugCB.height + 2);
		}				/**		 *	Handle click events		 */		private function handleClick (e : MouseEvent) : void {			switch (e.target) {				case tClearButton: 					mYalogViewer.clear(); 					break; 				case tCopyButton: 					mYalogViewer.copyDataToClipboard(); 					break;				case tPauseButton: 					mYalogViewer.pause(); 					break;				case tDebugCB: 				case tInfoCB: 				case tWarnCB: 					handleLevelCheckboxClick(e.target as CheckBox); 					break;
			}		}				/**		 *	CheckBox handler for level checkboxes		 */		private function handleLevelCheckboxClick (inCheckBox:CheckBox) : void {			if (inCheckBox.selected) {				// find filter to remove							switch (inCheckBox) {					case tDebugCB: mYalogViewer.removeFilter(mDebugMessageFilter); break;					case tInfoCB: mYalogViewer.removeFilter(mInfoMessageFilter); break;					case tWarnCB: mYalogViewer.removeFilter(mWarnMessageFilter); break;				}			} else {				// create filter to add				switch (inCheckBox) {					case tDebugCB: mYalogViewer.addFilter(mDebugMessageFilter); break;					case tInfoCB: mYalogViewer.addFilter(mInfoMessageFilter); break;					case tWarnCB: mYalogViewer.addFilter(mWarnMessageFilter); break;				}			}		}		override public function toString():String {			return getQualifiedClassName(this);		}	}}
